buildscript {
    ext {
        springBootVersion = '2.5.4'
    }
}
plugins {

    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    // https://plugins.gradle.org/plugin/com.gorylenko.gradle-git-properties
    id "com.gorylenko.gradle-git-properties" version "2.3.1"
    id 'java'
    // gradle 7 부터는 org.asciidoctor.convert가 아닌asciidoctor.jvm.convert를 사용
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.greglturnquist'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    // Snippet 의 생성 위치를 지정
    //snippetsDir = file('build/generated-snippets')
    set('snippetsDir', file('build/generated-snippets'))
}

// asciidoctor 추가
asciidoctor {
    attributes 'snippets': snippetsDir // adoc 파일 생성시 올바르게 include하기 위함
    // Snippets 디렉토리를 Input 디렉토리로 설정
    inputs.dir snippetsDir
    // 문서 생성 전 테스트가 실행되도록 test 에 종속 설정
    dependsOn test
}
// 기존에 존재하는 docs를 삭제
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}
// build/docs/asciidoc 파일을 src/main/resources/static/docs로 복사해준다
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc/")
    into file("src/main/resources/static/docs")
}

// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/
// 빌드 파일에서 계층형 JAR 사용하도록 지정
bootJar {
    layered {
        enabled = true
    }
    // bootJar 설정. 스니펫을 이용해 문서 작성 후, build - docs - asciidoc 하위에 생기는
    dependsOn asciidoctor
    // 생성된 문서를 static/docs 에 복사
    copy {
        from "${asciidoctor.outputDir}" // gradle은 src/docs/asciidoc 에 메인 adoc 파일을 직접 생성해주어야함
        into 'src/main/resources/static/docs' // asciidoctor로 만든 문서는 static/docs 디렉토리로
    }
}

// plain.jar 생성취소
jar {
    enabled = false
}

// build시 copy 실행
build {
    dependsOn copyDocument
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation("org.springframework.boot:spring-boot-starter-hateoas"){
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
    }

    implementation 'org.mongodb:mongodb-driver-sync'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // MongoDB 테스트DB
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    // Maven 과 같이 test Scope 에 대한 mockMvc 의존성을 추가 (WebClient, Assured 사용가능)
    // restassured를 사용하려면 restassured 의존성을 넣어주면된다
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'

}

test {
    useJUnitPlatform()
//    exclude ("**")
    // Snippets 디렉토리를 출력으로 작업하도록 설정
    outputs.dir snippetsDir
}