buildscript {
    ext {
        springBootVersion = '2.5.4'
    }
}
plugins {

    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    // https://plugins.gradle.org/plugin/com.gorylenko.gradle-git-properties
    id "com.gorylenko.gradle-git-properties" version "2.3.1"
    id 'java'
}

group = 'com.greglturnquist'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/
// 빌드 파일에서 계층형 JAR 사용하도록 지정
bootJar {
    layered {
        enabled = true
    }
}

// plain.jar 생성취소
jar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // Spring AMQP 추가
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    // 리액티브가 아닌 전통적인 몽고디비 드라이버
    implementation 'org.mongodb:mongodb-driver-sync'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // 내장형 MongoDB 테스트DB
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    // Testcontainer 버전 지정
    implementation platform('org.testcontainers:testcontainers-bom:1.16.0')
    // RabbitMQ Testcontainer 의존관계 추가
    testImplementation 'org.testcontainers:rabbitmq'
    // Junit 5와 함께 사용하기 위해 추가
    testImplementation 'org.testcontainers:junit-jupiter'
}

test {
    useJUnitPlatform()
//    exclude ("**")
}